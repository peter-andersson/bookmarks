@page "/"

@inject BookmarkContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject SignInManager<ApplicationUser> SignInManager

@attribute [Authorize]

<PageTitle>Bookmarks</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="row">
          <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Search for bookmarks" [(ngModel)]="searchText" (keyup)="searchKeyup($event)">
            <span class="input-group-text" id="basic-addon1"><button class="btn btn-sm btn-primary" type="button" (click)="search()">Search</button></span>
          </div>
        </div>
        <div class="row">
          <div class="col-12 col-lg-9">
            <h5>Bookmarks</h5>
            <div class="list-group">
              @foreach (var bookmark in BookmarkList)
              {
                <div *ngFor="let bookmark of filteredBookmarks" class="list-group-item border-0">
                  <a href="@bookmark.Url" class="fs-bold link-underline link-underline-opacity-0 link-underline-opacity-100-hover">@(string.IsNullOrWhiteSpace(bookmark.Title) ? bookmark.Url : bookmark.Title)</a>
                  <div class="bookmark-description d-flex">
                    <span class="text-truncate">@bookmark.Description</span>
                  </div>
                  <div class="font-monospace bookmark-tag">
                    @foreach (var tag in bookmark.Tags)
                    {
                      <span class="me-1"><a class="link-info link-underline link-underline-opacity-0 link-underline-opacity-100-hover tag" (click)="filterTag(tag)">#@tag.Name</a></span>
                    }
                  </div>
                  <div class="bookmark-description">
                    <a routerLink="/edit/@bookmark.BookmarkId" class="link-success link-underline link-underline-opacity-0 link-underline-opacity-100-hover">Edit</a>
                    <a routerLink="/delete/@bookmark.BookmarkId" class="link-danger link-underline link-underline-opacity-0 link-underline-opacity-100-hover flex-grow-1 float-end">Delete</a>
                  </div>
                </div>  
              }
            </div>
          </div>
          <div class="col-lg-3 d-none d-lg-block">
            <h5>Tags</h5>
            <div class="d-flex flex-wrap gap-1">
              @foreach (var tag in Tags)
              {
                <span class="list-group-item border-0">
                  <a (click)="filterTag(tag)" class="link-info link-underline link-underline-opacity-0 link-underline-opacity-100-hover tag">@tag.Name</a>
                </span>
              }
            </div>
          </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {

  private IEnumerable<Bookmark> BookmarkList { get; set; } = [];
  private IEnumerable<Tag> Tags { get; set; } = [];

  protected override async Task OnInitializedAsync()
  {
    var personIdString = HttpContextAccessor?.HttpContext?.User.FindFirstValue("PersonId");
    if (!int.TryParse(personIdString, out var personId))
    {
      var userId = HttpContextAccessor?.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier);
      if (userId is not null)
      {
        personId = await DbContext.Persons.Where(p => p.ApplicationUserId == userId).Select(p => p.PersonId).FirstOrDefaultAsync();
        if (personId > 0)
        {
          var user = await SignInManager.UserManager.Users.FirstOrDefaultAsync(u => u.Id == userId);
          if (user is null)
          {
            return;
          }
          
          var customClaims = new[] { new Claim("PersonId", personId.ToString()) };            
          await SignInManager.SignOutAsync();
          await SignInManager.SignInWithClaimsAsync(user, true, customClaims);
        }
        else
        {
          return;
        }
      }
    }

    BookmarkList = await DbContext.Bookmarks.Include(b => b.Tags).Where(b => b.PersonId == personId).ToListAsync();
    Tags = await DbContext.Tags.Where(t => t.PersonId == personId).ToListAsync();                                   
  }
}
