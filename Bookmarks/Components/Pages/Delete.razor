@page "/Delete/{id:int}"

@rendermode InteractiveServer

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@implements IDisposable

@attribute [Authorize]

<PageTitle>Delete bookmark</PageTitle>

<h1>Delete bookmark</h1>

@if (Bookmark is not null)
{
    <div>
        <p>Are you sure you want to delete this bookmark?</p>
        <fieldset disabled>
            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <input type="text" class="form-control" id="title" readonly value="@Bookmark.Title">
            </div>            
            <div class="mb-3">
                <label for="url" class="form-label">URL</label>
                <input type="text" class="form-control" id="url" readonly value="@Bookmark.Url">
            </div>
        </fieldset>

        <button type="button" class="btn btn-danger" @onclick="DeleteBookmark">
            <span class="spinner-border spinner-border-sm" aria-hidden="true" hidden="@(!Deleting)"></span>
            <span role="status">Delete</span>
        </button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger mt-5" role="alert">
            <p>@ErrorMessage</p>
            <p>
                <button class="btn btn-primary" type="button" aria-expanded="false" aria-controls="collapseWidthExample" @onclick="ToggleDetail">
                    Show details
                </button>
            </p>
            <div style="min-height: 120px;">
                <div class="@DetailCssClass collapse-horizontal">
                    <div class="card card-body">
                        @ErrorMessageDetail
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <h2>Bookmark not found</h2>
}

@code {
    private ApplicationDbContext? _dbContext;

    [Parameter] public int Id { get; set; }

    private Bookmark? Bookmark { get; set; }
    private bool Deleting { get; set; }

    private bool _dataIsLoaded;
    private string ErrorMessage { get; set; } = string.Empty;
    private string ErrorMessageDetail { get; set; } = string.Empty;

    private bool _showDetail;
    private string? DetailCssClass => _showDetail ? "collapse" : null;

    private void ToggleDetail()
    {
        _showDetail = !_showDetail;
    }

    private async Task DeleteBookmark()
    {
        if (Bookmark is null)
        {
            return;
        }

        if (_dbContext is null)
        {
            return;
        }

        ErrorMessage = string.Empty;
        ErrorMessageDetail = string.Empty;
        Deleting = true;

        try
        {
            _dbContext.Remove(Bookmark);
            await _dbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            ErrorMessage = "Failed to delete bookmark";
            ErrorMessageDetail = e.ToString();
        }
        finally
        {
            Deleting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        if (_dataIsLoaded)
        {
            return;
        }

        _dbContext = await DbFactory.CreateDbContextAsync();

        if (_dbContext is not null)
        {
            var userId = HttpContextAccessor?.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (userId is null)
            {
                return;
            }

            Bookmark = await _dbContext.Bookmarks.Where(b => b.BookmarkId == Id && b.UserId == userId).FirstOrDefaultAsync();
        }

        _dataIsLoaded = true;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _dbContext?.Dispose();
    }

}