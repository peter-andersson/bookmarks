@implements IDisposable

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <header>
            <nav class="navbar navbar-expand-lg bg-body-tertiary">
                <div class="container-fluid">
                    <a class="navbar-brand" href="/">Bookmarks</a>
                    <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div @onclick="ToggleNavMenu" class="@NavMenuCssClass navbar-collapse">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Home</NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="add" Match="NavLinkMatch.Prefix">Add bookmark</NavLink>
                            </li>
                        </ul>
                            <div class="nav-item">
                                <NavLink class="nav-link" href="Account/Manage">Manage user</NavLink>
                            </div>                        
                        @* ReSharper disable once Html.PathError *@
                        <form class="d-flex ms-2" action="Account/Logout" method="post">
                            <AntiforgeryToken/>
                            <input type="hidden" name="ReturnUrl" value="@CurrentUrl"/>
                            <button type="submit" class="nav-link">Logout</button>
                        </form>
                    </div>
                </div>
            </nav>
        </header>
    </Authorized>
</AuthorizeView>

@code {
    private string? CurrentUrl { get; set; }
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;
    
    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }    

    protected override void OnInitialized()
    {
        CurrentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        CurrentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}